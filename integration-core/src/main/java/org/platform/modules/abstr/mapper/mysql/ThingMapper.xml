<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mysql.org.platform.modules.abstr.entity.Thing">

	<resultMap type="Thing" id="thingResultMap">  
        <id property="id" column="ID"/>  
        <result property="ups" column="UPS"/>
        <result property="downs" column="DOWNS"/>  
        <result property="deleted" column="DELETED"/> 
        <result property="spam" column="SPAM"/> 
        <result property="creatorId" column="CREATOR_ID"/> 
        <result property="createTime" column="CREATE_TIME"/> 
    </resultMap>
    
    <resultMap type="Thing" id="thingWithDatasResultMap">  
        <id property="id" column="ID"/>  
        <result property="ups" column="UPS"/>
        <result property="downs" column="DOWNS"/>  
        <result property="deleted" column="DELETED"/> 
        <result property="spam" column="SPAM"/> 
        <result property="creatorId" column="CREATOR_ID"/> 
        <result property="createTime" column="CREATE_TIME"/> 
        <collection property="datas" ofType="ThingData" javaType="ArrayList">
        	<id property="thingId" column="THING_ID"/> 
       		<result property="attribute" column="ATTRIBUTE"/>
       		<result property="value" column="VALUE"/>
       		<result property="kind" column="KIND"/> 
        </collection>
    </resultMap>
    
    <resultMap type="ThingData" id="thingDataResultMap">  
    	<id property="thingId" column="THING_ID"/> 
       	<result property="attribute" column="ATTRIBUTE"/>
       	<result property="value" column="VALUE"/>
       	<result property="kind" column="KIND"/> 
    </resultMap>
    
    <sql id="columnClause">ID, UPS, DOWNS, DELETED, SPAM, CREATOR_ID, CREATE_TIME</sql>
    
    <sql id="whereClause">
    	<where>
    		<if test="id != null">
    			ID = #{id}
    		</if>
    		<if test="ids != null and ids.size() > 0">
    			ID IN 
    			<foreach collection="ids" index="index" item="item" open="(" separator="," close=")"> 
            		#{item} 
        		</foreach> 
    		</if>
    		<if test="ups != null">
    			AND UPS = #{ups}
    		</if>
    		<if test="downs != null">
    			AND DOWNS = #{downs}
    		</if>
    		<if test="deleted != null">
    			AND DELETED = #{deleted}
    		</if>
    		<if test="spam != null">
    			AND SPAM = #{spam}
    		</if>
    		<if test="creatorId != null">
    			AND CREATOR_ID = #{creatorId}
    		</if>
    		<if test="createTime != null">
    			AND CREATE_TIME = #{createTime}
    		</if>
    		<if test="createTimeGT != null">
    			AND CREATE_TIME &gt; #{createTimeGT}
    		</if>
    		<if test="createTimeGE != null">
    			AND CREATE_TIME &gt;= #{createTimeGE}
    		</if>
    		<if test="createTimeLT != null">
    			AND CREATE_TIME &lt; #{createTimeLT}
    		</if>
    		<if test="createTimeLE != null">
    			AND CREATE_TIME &lt;= #{createTimeLE}
    		</if>
    	</where>
    </sql>
    
    <sql id="whereClauseWithT">
    	<where>
    		<if test="id != null">
    			T.ID = #{id}
    		</if>
    		<if test="ids != null and ids.size() > 0">
    			T.ID IN 
    			<foreach collection="ids" index="index" item="item" open="(" separator="," close=")"> 
            		#{item} 
        		</foreach> 
    		</if>
    		<if test="ups != null">
    			AND T.UPS = #{ups}
    		</if>
    		<if test="downs != null">
    			AND T.DOWNS = #{downs}
    		</if>
    		<if test="deleted != null">
    			AND T.DELETED = #{deleted}
    		</if>
    		<if test="spam != null">
    			AND T.SPAM = #{spam}
    		</if>
    		<if test="creatorId != null">
    			AND T.CREATOR_ID = #{creatorId}
    		</if>
    		<if test="createTime != null">
    			AND T.CREATE_TIME = #{createTime}
    		</if>
    		<if test="createTimeGT != null">
    			AND T.CREATE_TIME &gt; #{createTimeGT}
    		</if>
    		<if test="createTimeGE != null">
    			AND T.CREATE_TIME &gt;= #{createTimeGE}
    		</if>
    		<if test="createTimeLT != null">
    			AND T.CREATE_TIME &lt; #{createTimeLT}
    		</if>
    		<if test="createTimeLE != null">
    			AND T.CREATE_TIME &lt;= #{createTimeLE}
    		</if>
    		<if test="dataOrderAttribute != null and dataOrderAttribute != ''">
    			AND D.ATTRIBUTE = #{dataOrderAttribute}
    		</if>
    	</where>
    </sql>
    
    <sql id="orderClause">
    	<if test="orderAttribute != null and orderAttribute != ''">
    		ORDER BY ${orderAttribute}
    		<if test="orderType != null and orderType != ''">
    			${orderType}
    		</if>
    	</if>
    </sql>
    
    <sql id="orderClauseWithT">
    	<if test="orderAttribute != null and orderAttribute != ''">
    		ORDER BY T.${orderAttribute}
    		<if test="orderType != null and orderType != ''">
    			${orderType}
    		</if>
    	</if>
    </sql>
    
    <sql id="orderClauseWithD">
    	<if test="dataOrderAttribute != null and dataOrderAttribute != ''">
    		ORDER BY D.VALUE
    		<if test="orderType != null and orderType != ''">
    			${orderType}
    		</if>
    	</if>
    </sql>
    
    <insert id="insert" keyProperty="id" parameterType="Thing">
    	INSERT INTO ${table} (UPS, DOWNS, DELETED, SPAM, CREATOR_ID, CREATE_TIME) 
        VALUES(#{ups}, #{downs}, #{deleted}, #{spam}, #{creatorId}, #{createTime})  
    </insert>
    
    <update id="update" parameterType="Thing">
    	UPDATE ${table} 
    	<set>
    		<if test="ups != null">
    			UPS = #{ups},
    		</if>
    		<if test="downs != null">
    			DOWNS = #{downs},
    		</if>
    		<if test="deleted != null">
    			DELETED = #{deleted},
    		</if>
    		<if test="spam != null">
    			SPAM = #{spam},
    		</if>
    		<if test="creatorId != null">
    			CREATOR_ID = #{creatorId},
    		</if>
    		<if test="createTime != null">
    			CREATE_TIME = #{createTime}
    		</if>
    	</set>
    	WHERE ID = #{id}
    </update>
    
    <update id="updateUp" parameterType="map">
    	UPDATE ${table} SET UPS = UPS + #{incr} WHERE ID = #{id}
    </update>
    
    <update id="updateDown" parameterType="map">
    	UPDATE ${table} SET DOWNS = DOWNS + #{incr} WHERE ID = #{id}
    </update>
    
    <update id="updateDeleted" parameterType="map">
    	UPDATE ${table} SET DELETED = #{deleted} WHERE ID = #{id}
    </update>
    
    <update id="updateSpam" parameterType="map">
    	UPDATE ${table} SET SPAM = #{spam} WHERE ID = #{id}
    </update>
    
    <delete id="delete" parameterType="Thing">
    	DELETE FROM ${table} WHERE ID = #{id}
    </delete>
    
    <select id="readDataByPK" parameterType="map" resultType="Thing" resultMap="thingWithDatasResultMap">
	    SELECT 
	    T.ID, T.UPS, T.DOWNS, T.DELETED, T.SPAM, T.CREATOR_ID, T.CREATE_TIME, 
	    D.ATTRIBUTE, D.VALUE, D.KIND 
	    FROM ${thingTable} T LEFT JOIN ${dataTable} D ON T.ID = D.THING_ID  
	    WHERE T.ID = #{id}
    </select>
    
    <select id="readDataByCondition" parameterType="map" resultType="Thing" resultMap="thingWithDatasResultMap">
	    SELECT 
	    T.ID, T.UPS, T.DOWNS, T.DELETED, T.SPAM, T.CREATOR_ID, T.CREATE_TIME, 
	    D.ATTRIBUTE, D.VALUE, D.KIND 
	    FROM ${thingTable} T LEFT JOIN ${dataTable} D ON T.ID = D.THING_ID  
	    <include refid="whereClauseWithT"/>
    </select>
    
    <select id="readDataByConditionV1" parameterType="map" resultType="Thing" resultMap="thingResultMap">
	    SELECT 
	    <include refid="columnClause"/>
	    FROM ${table} 
	    <include refid="whereClause"/>
    </select>
    
    <select id="readDataListByCondition" parameterType="map" resultType="Thing" resultMap="thingWithDatasResultMap">  
        SELECT 
	    T.ID, T.UPS, T.DOWNS, T.DELETED, T.SPAM, T.CREATOR_ID, T.CREATE_TIME, 
	    D.ATTRIBUTE, D.VALUE, D.KIND 
	    FROM ${thingTable} T LEFT JOIN ${dataTable} D ON T.ID = D.THING_ID  
	    <include refid="whereClauseWithT"/>
        <include refid="orderClauseWithT"/>
        <include refid="orderClauseWithD"/>
    </select>
    
    <select id="readDataListByConditionV1" parameterType="map" resultType="Thing" resultMap="thingResultMap">  
        SELECT 
        <include refid="columnClause"/>
        FROM ${table} 
        <include refid="whereClause"/>
        <include refid="orderClause"/>
    </select>
    
    <select id="readDataPaginationByCondition" resultType="Thing" resultMap="thingResultMap">  
    	SELECT 
        <include refid="columnClause"/>
        FROM ${table} 
        <include refid="whereClause"/>
        <include refid="orderClause"/>
    </select>
    
    <select id="readDataPaginationByConditionWithOrder" resultType="Thing" resultMap="thingResultMap">  
    	SELECT T.ID, T.UPS, T.DOWNS, T.DELETED, T.SPAM, T.CREATOR_ID, T.CREATE_TIME
        FROM ${thingTable} T LEFT JOIN ${dataTable} D ON T.ID = D.THING_ID  
        <include refid="whereClauseWithT"/>
        <include refid="orderClauseWithT"/>
        <include refid="orderClauseWithD"/>
    </select>

    <select id="readCountByCondition" resultType="java.lang.Long">  
    	SELECT COUNT(1) FROM ${table}
        <include refid="whereClause"/>
    </select>
    
</mapper>